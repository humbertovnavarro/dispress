import { SlashCommandBuilder } from "@discordjs/builders";
import { CommandInteraction } from "discord.js";
import generatePlaylist from "../lib/query/generatePlaylist";
import { UsePlayer, GetActiveChannel } from "../lib/player";

const body = new SlashCommandBuilder()
.setName("guildplaylist")
.setDescription("plays an autogenerated guild playlist.");

export default {
  body,
  handler: async (interaction: CommandInteraction) => {
    if(!interaction.guild) {
        return interaction.reply("Something went wrong.");
    }
    if(!interaction.member) {
        return interaction.reply("Something went wrong.");
    }

    const member = interaction.guild.members.cache.get(interaction.member.user.id);
    const voiceChannel = member?.voice.channel;
    const botVoiceChannel = GetActiveChannel(interaction.guild);
    if(botVoiceChannel && voiceChannel?.id != botVoiceChannel?.id) {
        return interaction.reply("You must be in the same voice channel as the bot");
    } else {
        if(!voiceChannel) {
            return interaction.reply("You must be in a voice channel to use this command");
        }
    }
    const player = UsePlayer(interaction.client);
    const queue = player.createQueue(interaction.guild, {
        metadata: {
            channel: interaction.channel
        }
    });
    const tracks = await generatePlaylist(interaction.guild);
    if(tracks.length === 0) {
        return interaction.reply(`not enough data to generate a guild playlist, try playing and liking songs.`);
    }
    interaction.reply(`created guild playlist with ${tracks.length} tracks.`);
    console.log(tracks);
    try {
        if (!queue.connection) await queue.connect(voiceChannel);
    } catch {
        queue.destroy();
        return await interaction.reply({ content: "Could not join your voice channel!", ephemeral: true });
    }
    tracks.forEach(query => {
        const track: any = player.search(query, {
            requestedBy: interaction.user,
        }).then(x => x.tracks[0])
        .then(track => {
            queue.play(track);
        });
    });
  }
}
